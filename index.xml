<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cangaroo自整理开发文档</title><link>https://can-dev.louisz.top/</link><description>Recent content on Cangaroo自整理开发文档</description><generator>Hugo -- gohugo.io</generator><language>zh</language><atom:link href="https://can-dev.louisz.top/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://can-dev.louisz.top/docs/core/CanTrace_class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://can-dev.louisz.top/docs/core/CanTrace_class/</guid><description/></item><item><title>Backend类</title><link>https://can-dev.louisz.top/docs/core/Backend_class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://can-dev.louisz.top/docs/core/Backend_class/</guid><description>Backend类 # 此类继承自 QObject类
成员函数 # 公共成员函数 # static Backend &amp;amp;instance()
void addCanDriver(CanDriver &amp;amp;driver)
bool startMeasurement()
void stopMeasurement()
bool isMeasurementRunning() const
double getTimestampAtMeasurementStart() const
uint64_t getUsecsAtMeasurementStart() const
uint64_t getNsecsSinceMeasurementStart() const
uint64_t getUsecsSinceMeasurementStart() const
void logMessage(const QDateTime dt, const log_level_t level, const QString msg)
MeasurementSetup &amp;amp;getSetup()
void loadDefaultSetup(MeasurementSetup &amp;amp;setup)
void setDefaultSetup()
void setSetup(MeasurementSetup &amp;amp;new_setup)
double currentTimeStamp() const
CanTrace *getTrace()
void clearTrace()
CanDbMessage *findDbMessage(const CanMessage &amp;amp;msg) const
CanInterfaceIdList getInterfaceList()
CanDriver *getDriverById(CanInterfaceId id)</description></item><item><title>CanListener类</title><link>https://can-dev.louisz.top/docs/driver/CanListener_class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://can-dev.louisz.top/docs/driver/CanListener_class/</guid><description>CanListener类 # 此类继承自 QObject类
成员函数 # 公共成员函数 # CanInterfaceId getInterfaceId()
CanInterface &amp;amp;getInterface()
槽函数 # void run()
void startThread()
void requestStop()
void waitFinish()
公共成员函数说明 # getInterfaceId # CanInterfaceId getInterfaceId() 返回所监听的接口(Interface)的ID。
getInterface # CanInterface &amp;amp;getInterface() 返回所监听的接口(Interface)。
公共槽函数说明 # run # void run() 循环从所监听的接口(Interface)读取数据并输出到trace(尚未研究CanTrace)，直至全部数据读取完毕
startThread # void startThread() 把当前CanListener关联到一个新的线程并启动，启动后执行run()函数
requestStop # void requestStop() 设置停止标志*，会使run()函数停止读取数据并退出
*停止标志：在run()函数中会检查此标志，若为真则退出
waitFinish # void waitFinish() 设置停止标志并等待进程停止
*停止标志：在run()函数中会检查此标志，若为真则退出</description></item><item><title>SetupDialog类</title><link>https://can-dev.louisz.top/docs/window/SetupDialog_class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://can-dev.louisz.top/docs/window/SetupDialog_class/</guid><description>SetupDialog类 # 此类继承自 QDialog类
成员函数 # 公共成员函数 # bool showSetupDialog(MeasurementSetup &amp;amp;setup)
void addPage(QWidget *widget)
void displayPage(QWidget *widget)
信号 # void onShowInterfacePage(SetupDialog &amp;amp;dlg, MeasurementInterface *mi)
槽函数 # 公共槽函数 # void treeViewSelectionChanged(const QItemSelection &amp;amp; selected, const QItemSelection &amp;amp; deselected)
void treeViewContextMenu(const QPoint&amp;amp; pos)
公有成员函数说明 # showSetupDialog # bool showSetupDialog(MeasurementSetup &amp;amp;setup) 被调用时会显示设置窗口
参数：
setup：MeasurementSetup类的引用 返回值：用户点击确定(ok)按钮关闭窗口返回true，其它情况返回false
addPage # void addPage(QWidget *widget) 未知（猜测：和显示接口列表的框有关） 观察：程序启动时此函数会被执行多次
displayPage # void displayPage(QWidget *widget) 未知（猜测：和显示接口列表的框有关）
信号说明 # onShowInterfacePage # void onShowInterfacePage(SetupDialog &amp;amp;dlg, MeasurementInterface *mi) 调试过程中未观察到此信号的发出</description></item></channel></rss>